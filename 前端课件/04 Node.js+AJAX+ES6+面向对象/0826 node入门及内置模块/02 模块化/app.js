// 模块块中，一个文件是一个模块，每个模块有自己的作用域，叫做模块作用域
// 在每个模块中声明的变量和函数只能在模块内部使用，从一个模块中访问另一个模块的变量和方法，就需要使用模块化规范
// 在不同的模块化规范中，模块的使用方式是不一样的，node使用的是commonJS模块化规范，模块化规范中主要是规定了如何导出模块（数据），和如何导入模块（数据）
// 想从一个模块A访问另一个模块B的数据，就需要模块B导出数据，模块A导入数据，在commonJS模块化规范，主要是学习如何导出模块和如何导入模块

// 导出模块：module.exports = {}

// 导入模块：require('模块名 或者 模块路径')
// 模块：1、内置模块；2、第三方模块；3、自定义模块
// 使用内置模块和第三方模块直接写模块名
// 使用自定义模块（我们自己创建的JS文件）需要添加./或者../路径


// 在commonJS的模块中，有一个对象module，module有一个属性exports，exports的值是一个空对象{}，导出模块就是用 moudule.exports = {}，{}内就是导出的数据
// console.log(module);
// console.log(module.exports);

console.log('入口文件');

// 导入模块
// 使用require导入模块，会执行这个模块中的代码，如果多次使用require导入同一个模块，后面导入会使用前面缓存的结果
var ma = require('./moduleA');
console.log('ma=', ma);

console.log(ma.fn(5));

require('./moduleA')


// 自定义一个模块，该模块返回一个函数，该函数有一个参数n，调用该函数，会输出一个99乘法表

// var a = 20;
// console.log('a=',a);


